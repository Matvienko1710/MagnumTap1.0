import { Telegraf } from 'telegraf';
import { getUser, updateUser } from './db.js';

const bot = new Telegraf(process.env.BOT_TOKEN); // <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

if (!process.env.BOT_TOKEN) {
  throw new Error("BOT_TOKEN must be provided!");
}

bot.start((ctx) => {
  ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ñ–º–∏ –∫–Ω–æ–ø–∫–∏: –§–∞—Ä–º, –ë–æ–Ω—É—Å –∏–ª–∏ –ü—Ä–æ—Ñ–∏–ª—å.', {
    reply_markup: {
      keyboard: [['üë®‚Äçüåæ –§–∞—Ä–º', 'üéÅ –ë–æ–Ω—É—Å'], ['üìä –ü—Ä–æ—Ñ–∏–ª—å']],
      resize_keyboard: true,
    },
  });
});

bot.hears('üë®‚Äçüåæ –§–∞—Ä–º', (ctx) => {
  const user = getUser(ctx.from.id);
  const now = Date.now();

  if (now - user.last_farm < 60_000) {
    const left = Math.ceil((60_000 - (now - user.last_farm)) / 1000);
    return ctx.reply(`‚è≥ –ü–æ–¥–æ–∂–¥–∏ ${left} —Å–µ–∫. –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞`);
  }

  user.stars += 1;
  user.last_farm = now;
  updateUser(ctx.from.id, user);
  ctx.reply('‚≠êÔ∏è +1 –∑–≤–µ–∑–¥–∞!');
});

bot.hears('üéÅ –ë–æ–Ω—É—Å', (ctx) => {
  const user = getUser(ctx.from.id);
  const now = Date.now();

  if (now - user.last_bonus < 3600_000) {
    const left = Math.ceil((3600_000 - (now - user.last_bonus)) / 60000);
    return ctx.reply(`üéÅ –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${left} –º–∏–Ω.`);
  }

  user.stars += 5;
  user.last_bonus = now;
  updateUser(ctx.from.id, user);
  ctx.reply('üéâ –¢—ã –ø–æ–ª—É—á–∏–ª +5 –∑–≤—ë–∑–¥ –±–æ–Ω—É—Å–æ–º!');
});

bot.hears('üìä –ü—Ä–æ—Ñ–∏–ª—å', (ctx) => {
  const user = getUser(ctx.from.id);
  ctx.reply(`üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n\n‚≠êÔ∏è –ó–≤—ë–∑–¥: ${user.stars}`);
});

bot.launch();
